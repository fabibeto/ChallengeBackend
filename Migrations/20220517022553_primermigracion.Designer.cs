// <auto-generated />
using System;
using ChallengeAPI.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChallengeAPI.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    [Migration("20220517022553_primermigracion")]
    partial class primermigracion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChallengeAPI.OrderModel.Ciudad", b =>
                {
                    b.Property<int>("CiudadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Cant_Habitantes")
                        .HasColumnType("bigint");

                    b.Property<int?>("ContinenteID")
                        .HasColumnType("int");

                    b.Property<string>("Denominacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Iconos_GeograficosID")
                        .HasColumnType("int");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Superficie")
                        .HasColumnType("bigint");

                    b.HasKey("CiudadID");

                    b.HasIndex("ContinenteID");

                    b.ToTable("Ciudades");
                });

            modelBuilder.Entity("ChallengeAPI.OrderModel.Continente", b =>
                {
                    b.Property<int>("ContinenteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CiudadID")
                        .HasColumnType("int");

                    b.Property<string>("Denominacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContinenteID");

                    b.ToTable("Continentes");
                });

            modelBuilder.Entity("ChallengeAPI.OrderModel.IconosGeograficos", b =>
                {
                    b.Property<int>("Iconos_GeograficosID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Altura")
                        .HasColumnType("bigint");

                    b.Property<int?>("CiudadID")
                        .HasColumnType("int");

                    b.Property<int?>("ContinenteID")
                        .HasColumnType("int");

                    b.Property<string>("Denominacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha_Creacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Iconos_GeograficosID");

                    b.HasIndex("CiudadID");

                    b.HasIndex("ContinenteID");

                    b.ToTable("IconosGeograficos");
                });

            modelBuilder.Entity("ChallengeAPI.OrderModel.Ciudad", b =>
                {
                    b.HasOne("ChallengeAPI.OrderModel.Continente", null)
                        .WithMany("Ciudades")
                        .HasForeignKey("ContinenteID");
                });

            modelBuilder.Entity("ChallengeAPI.OrderModel.IconosGeograficos", b =>
                {
                    b.HasOne("ChallengeAPI.OrderModel.Ciudad", "Ciudad")
                        .WithMany("IconosGeograficos")
                        .HasForeignKey("CiudadID");

                    b.HasOne("ChallengeAPI.OrderModel.Continente", "Continente")
                        .WithMany()
                        .HasForeignKey("ContinenteID");
                });
#pragma warning restore 612, 618
        }
    }
}
